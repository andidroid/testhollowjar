batch

# create realm
/subsystem=elytron/filesystem-realm=applicationFsRealm:add(path=filesystemrealm,relative-to=jboss.server.config.dir)

/subsystem=elytron/filesystem-realm=applicationFsRealm:add-identity(identity=user)
/subsystem=elytron/filesystem-realm=applicationFsRealm:set-password(clear={password="user"}, identity=user)
/subsystem=elytron/filesystem-realm=applicationFsRealm:add-identity-attribute(identity=user, name=Roles, value=["user","test"])

/subsystem=elytron/filesystem-realm=applicationFsRealm:add-identity(identity=admin)
/subsystem=elytron/filesystem-realm=applicationFsRealm:set-password(clear={password="admin"}, identity=user)
/subsystem=elytron/filesystem-realm=applicationFsRealm:add-identity-attribute(identity=admin, name=Roles, value=["admin","user","test"])

/subsystem=elytron/simple-role-decoder=from-roles-attribute:add(attribute=Roles)

# Creates a Security Domain
/subsystem=elytron/security-domain=applicationFsSecurityDomain:add(realms=[{realm=applicationFsRealm,role-decoder=from-roles-attribute}],default-realm=applicationFsRealm,permission-mapper=default-permission-mapper)
# Configure an http-authentication-factory:
/subsystem=elytron/http-authentication-factory=applicationFs-http-authentication:add(http-server-mechanism-factory=global,security-domain=applicationFsSecurityDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=applicationFsRealm}]}])

/subsystem=elytron/http-authentication-factory=application-http-authentication:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=DIGEST,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])


/subsystem=undertow/application-security-domain=applicationFsSecurityDomain:add(http-authentication-factory=applicationFs-http-authentication)
/subsystem=undertow/application-security-domain=ApplicationDomain:add(http-authentication-factory=application-http-authentication)

# set default application-security-domain, dont need to set 
# https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/8-beta/html/securing_applications_and_management_interfaces_using_multiple_identity_stores/securing_management_interfaces_and_applications#proc_adding-authentication-and-authorization-to-management-interfaces_default
# https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/8-beta/html/securing_applications_and_management_interfaces_using_multiple_identity_stores/securing_management_interfaces_and_applications#proc_adding-authentication-and-authorization-to-applications-for-aggregate-realm_assembly_using-a-security-domain-to-authenticate-and-authorize-application-users-aggregate-realm
/subsystem=undertow:write-attribute(name=default-security-domain, value="applicationFsSecurityDomain")
# override-deployment-config
/subsystem=undertow/application-security-domain=applicationFsSecurityDomain:write-attribute(name=override-deployment-config,value=true)

/subsystem=elytron/http-authentication-factory=applicationFs-http-authentication:list-add(name=mechanism-configurations, value={mechanism-name=FORM,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]})
/subsystem=elytron/http-authentication-factory=applicationFs-http-authentication:list-add(name=mechanism-configurations, value={mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]})

# JACC
# TODO already defined
# /subsystem=elytron/policy=jacc:add(jacc-policy={})
/subsystem=undertow/application-security-domain=applicationFsSecurityDomain:write-attribute(name=enable-jacc,value=true)



# SSO
# use client ssl context clientSSLContext from security-client-tls.cli

# SSO
/subsystem=undertow/application-security-domain=applicationFsSecurityDomain/setting=single-sign-on:add(key-store=serverKeyStore, key-alias=localhost, domain=localhost, credential-reference={clear-text=password}, client-ssl-context=clientSSLContext, http-only=true, secure=true)

run-batch
