batch

/subsystem=elytron/credential-store=credential-store:add(relative-to=jboss.server.config.dir,path=credential-store.jks,credential-reference={clear-text="password"},create=true)
# 
/subsystem=elytron/credential-store=credential-store:generate-secret-key(alias=secret-key)

# create resolvers list with entry credential-store-resolver
/subsystem=elytron/expression=encryption:add(resolvers=[{name=credential-store-resolver,credential-store=credential-store,secret-key=secret-key}])
# or add to existing list
# /subsystem=elytron/expression=encryption:list-add(name=resolvers,value={name=credential-store-resolver,credential-store=credential-store,secret-key=secret-key})
# set default resolver
/subsystem=elytron/expression=encryption:write-attribute(name=default-resolver,value=credential-store-resolver)


# use resolver to create an expression for 'password'.

/subsystem=elytron/expression=encryption:create-expression(clear-text=password)

# -------------
/subsystem=elytron/credential-store=credential-store:add-alias(alias=postgres, secret-value="postgres")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=artemis, secret-value="artemis")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=infinispan, secret-value="infinispan")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=keycloak, secret-value="keycloak")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=kafka, secret-value="kafka")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=password, secret-value="password")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=server-keystore, secret-value="password")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=client-keystore, secret-value="password")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=server-truststore, secret-value="password")
/subsystem=elytron/credential-store=credential-store:add-alias(alias=client-truststore, secret-value="password")

run-batch



# TODO



# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.credential-store,dependent-address=[("subsystem" => "elytron"),("credential-store" => "*")])
# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.credential-store,dependent-address=[("subsystem" => "elytron"),("credential-store" => "*")])

# /subsystem=elytron/credential-store=credential-store:write-attribute(name=credential-reference,value={"clear-text" => "password","store" => "credential-store"})
# /subsystem=elytron/credential-store=credential-store:write-attribute(name=credential-reference,value={"clear-text" => "password","store" => "credential-store","alias" => "vuz9wkpyjv"})
# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.credential-store,dependent-address=[("subsystem" => "elytron"),("credential-store" => "*")])
# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.credential-store,dependent-address=[("subsystem" => "elytron"),("credential-store" => "*")])
# /subsystem=elytron/secret-key-credential-store=testSecretKeyCredentialStore:add(create=true,path=testSecretKeyCredentialStore.jks,relative-to=jboss.server.data.dir,populate=true)
# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.credential-store,dependent-address=[("subsystem" => "elytron"),("credential-store" => "*")])
# /subsystem=elytron/credential-store=testCredentialStore:add(create=true,path=testCredentialStore.jks,relative-to=jboss.server.data.dir,credential-reference={"store" => "testSecretKeyCredentialStore","alias" => "testCredentialReference","type" => "testCredentialReferenceType","clear-text" => "testCredentialReferenceClearText"},type=testType)
# /subsystem=elytron/credential-store=testCredentialStore:write-attribute(name=credential-reference,value={"store" => "testSecretKeyCredentialStore","alias" => "testCredentialReference","type" => "testCredentialReferenceType","clear-text" => "test"})

# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.authentication-context,dependent-address=[("subsystem" => "elytron"),("authentication-context" => "*")])
# /core-service=capability-registry:suggest-capabilities(name=org.wildfly.security.authentication-context,dependent-address=[("subsystem" => "elytron")])