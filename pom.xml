<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>me.andidroid</groupId>
    <artifactId>test</artifactId>
    <version>0.0.25</version>
  </parent>
  <artifactId>testhollowjar</artifactId>
  <version>0.1.4-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>testhollowjar</name>
  <description>test war module</description>

  <url>https://github.com/andidroid/testhollowjar</url>

  <licenses>
    <license>
      <name>Do What The F*ck You Want To Public License</name>
      <url>http://www.wtfpl.net/txt/copying/</url>
      <distribution>repo</distribution>
      <comments>The Do What The Fuck You Want To Public License (WTFPL) is a free software license.</comments>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:https://github.com/andidroid/testhollowjar.git</connection>
    <developerConnection>scm:git:https://github.com/andidroid/testhollowjar.git</developerConnection>
    <url>https://github.com/andidroid/testhollowjar.git</url>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <repository>
      <id>github</id>
      <name>GitHub andidroid Apache Maven Packages</name>
      <url>https://maven.pkg.github.com/andidroid/testhollowjar</url>
    </repository>
    <!--
    <snapshotRepository>
      <id>github</id>
      <name>GitHub andidroid Apache Maven Packages</name>
      <url>https://maven.pkg.github.com/andidroid</url>
    </snapshotRepository>
    -->
    <site>
      <id>github</id>
      <name>GitHub andidroid Apache Maven Packages</name>
      <url>scm:git:https://github.com/andidroid/testhollowjar.git</url>
    </site>
  </distributionManagement>

  <properties>
    <enforcer.skip>true</enforcer.skip>
    <java.version>11</java.version>
    <javaee.version>8.0.0</javaee.version>
    <microprofile.version>4.1</microprofile.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>


    <mockito.version>4.0.0</mockito.version>
    <rest-assured.version>4.4.0</rest-assured.version>
    <microshed.version>0.9.1</microshed.version>
    <testcontainers.version>1.16.2</testcontainers.version>
    <mockserver-client-java.version>5.11.2</mockserver-client-java.version>


    <wildfly.version>25.0.0.Final</wildfly.version>

    <wildfly-datasources-galleon-pack.version>2.0.3.Final</wildfly-datasources-galleon-pack.version>

    <wildfly-maven-plugin.version>2.1.0.Final</wildfly-maven-plugin.version>
    <wildfly-jar-maven-plugin.version>6.0.0.Final</wildfly-jar-maven-plugin.version>
    <jkube.version>1.5.1</jkube.version>
    <jib.version>3.1.4</jib.version>
    <flyway.version>8.0.2</flyway.version>
    <postgres.version>42.3.0</postgres.version>
  </properties>

  <!-- External non standard repositories -->
  <repositories>
    <repository>
      <id>github</id>
      <url>https://maven.pkg.github.com/andidroid/test</url>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>

      <dependency>
        <groupId>org.eclipse.microprofile</groupId>
        <artifactId>microprofile</artifactId>
        <version>${microprofile.version}</version>
        <type>pom</type>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>jakarta.platform</groupId>
        <artifactId>jakarta.jakartaee-api</artifactId>
        <version>${javaee.version}</version>
        <scope>provided</scope>
      </dependency>

      <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>${rest-assured.version}</version>
        <scope>test</scope>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
      <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <version>${postgres.version}</version>
      </dependency>


    </dependencies>
  </dependencyManagement>
  <dependencies>

    <dependency>
      <groupId>org.eclipse.microprofile</groupId>
      <artifactId>microprofile</artifactId>
      <type>pom</type>
    </dependency>

    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>


    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.microshed</groupId>
      <artifactId>microshed-testing-testcontainers</artifactId>
      <version>${microshed.version}</version>
      <scope>test</scope>
    </dependency>
    <!--
  -->
    <!--
    <dependency>
      <groupId>org.microshed</groupId>
      <artifactId>microshed-testing-liberty</artifactId>
      <version>0.9.1</version>
      <scope>test</scope>
    </dependency>
   -->
    <dependency>
      <groupId>org.microshed</groupId>
      <artifactId>microshed-testing-wildfly</artifactId>
      <version>${microshed.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mockserver</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mock-server</groupId>
      <artifactId>mockserver-client-java</artifactId>
      <version>${mockserver-client-java.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.32</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>${flyway.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <pluginManagement>
      <!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <groupId>com.google.cloud.tools</groupId>
          <artifactId>jib-maven-plugin</artifactId>
          <version>${jib.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>

      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-maven-plugin</artifactId>
        <version>${wildfly-maven-plugin.version}</version>
        <configuration>
          <jboss-home>target/bootable-jar-build-artifacts/wildfly</jboss-home>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-jar-maven-plugin</artifactId>
        <version>${wildfly-jar-maven-plugin.version}</version>
        <configuration>
          <feature-packs>
            <feature-pack>
              <location>wildfly@maven(org.jboss.universe:community-universe)#${wildfly.version}</location>
            </feature-pack>
            <feature-pack>
              <groupId>org.wildfly</groupId>
              <artifactId>wildfly-datasources-galleon-pack</artifactId>
              <version>${wildfly-datasources-galleon-pack.version}</version>
            </feature-pack>
          </feature-packs>
          <layers>
            <layer>jaxrs</layer>
            <layer>logging</layer>
            <layer>observability</layer>
            <layer>cloud-profile</layer>
            <layer>web-clustering</layer>
            <layer>elytron-oidc-client</layer>
            <!--
            <layer>remote-activemq</layer>
            -->
            <!---->
            <layer>postgresql-datasource</layer>

            <layer>web-console</layer>
          </layers>
          <excluded-layers>
            <layer>deployment-scanner</layer>
            <!--
            <layer>messaging-activemq</layer>
            -->
            <layer>jms-activemq</layer>
          </excluded-layers>
          <cli-sessions>
            <cli-session>
              <resolve-expressions>false</resolve-expressions>
              <script-files>

                <script>cli-scripts/system-logging.cli</script>
                <!-- -->
                <script>cli-scripts/system-tracing.cli</script>
              </script-files>
            </cli-session>
            <cli-session>
              <properties-file>cli-scripts/cli.properties</properties-file>
              <script-files>
                <script>cli-scripts/security-credentialstore.cli</script>
                <script>cli-scripts/security-datasource.cli</script>
                <script>cli-scripts/security-tls.cli</script>
                <script>cli-scripts/security-management.cli</script>
                <!-- -->
                <script>cli-scripts/security-sso.cli</script>

              </script-files>
            </cli-session>
          </cli-sessions>
          <displayCliScriptsOutput>true</displayCliScriptsOutput>
          <extra-server-content-dirs>
            <extra-content>extra-content</extra-content>
          </extra-server-content-dirs>
          <plugin-options>
            <jboss-fork-embedded>${plugin.fork.embedded}</jboss-fork-embedded>
          </plugin-options>
          <cloud>
            <type>kubernetes</type>
            <enable-jgroups-password>true</enable-jgroups-password>
          </cloud>
          <hollow-jar>true</hollow-jar>
          <output-file-name>testhollowjar.jar</output-file-name>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>

      </plugin>

      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <configuration>
          <containerizingMode>packaged</containerizingMode>
          <to>
            <image>andidroid/testhollowjar</image>
            <tags>${project.version}</tags>
            <!-- to push to external repo -->
            <!--<image>quay.io/<your organization>/jaxrs-jib</image>-->
          </to>

          <container>
            <args>
              <!-- required to create a route -->
              <arg>-b=0.0.0.0</arg>
              <!-- Deployed app installed by next layer -->
              <arg>--deployment=/deployments/ROOT.war/</arg>
              <arg>--install-dir=/wildfly</arg>
            </args>
            <ports>
              <port>8080</port>
              <port>9990</port>
            </ports>
            <mainClass>org.wildfly.core.jar.boot.Main</mainClass>
          </container>
        </configuration>
        <!--
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>dockerBuild</goal>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
      -->
      </plugin>

    </plugins>
  </build>
  <reporting>
    <plugins></plugins>
  </reporting>

  <profiles>
    <profile>
      <id>kubernetes</id>
      <properties>
        <!--
        <jkube.generator.from>registry.redhat.io/ubi8/openjdk-11:latest</jkube.generator.from>
        -->
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eclipse.jkube</groupId>
            <artifactId>kubernetes-maven-plugin</artifactId>
            <version>${jkube.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>resource</goal>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <enricher>
                <config>
                  <jkube-service>
                    <type>NodePort</type>
                  </jkube-service>
                </config>
              </enricher>

              <!--
              <images>
                <image>
                  <name>${image.user}/${image.name}:%l</name>
                  <alias>${project.artifactId}</alias>
                  <build>
                    <from>quay.io/jkube/jkube-java-binary-s2i:0.0.10</from>
                  </build>
                </image>
              </images>
            -->
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>